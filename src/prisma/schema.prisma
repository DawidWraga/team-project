// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// npx prisma generate 

generator zod {
  provider      = "zod-prisma"
  output        = "./zod"
  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports = "./zod/helpers" // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

model Example {
  id          Int      @id @default(autoincrement())
  dateCreated DateTime @default(now())
  text        String ///@zod.min(3)
}

model Post {
  id          Int       @id @default(autoincrement())
  dateCreated DateTime  @default(now())
  dateUpdated DateTime? @updatedAt
  title       String    @db.Text ///@zod.min(3).trim
  content     String    @db.Text
  solved      Boolean
  replies     Comment[]

  authorId Int

  author User @relation(fields: [authorId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())

  authorId Int
  postId   Int

  author User @relation(fields: [authorId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
}

model User {
  id       Int    @id @default(autoincrement())
  fullName String @db.Text ///@zod.min(3).trim
  email    String @unique @db.VarChar(30) ///@zod.email().trim
  //must be 12 char long, least one uppercase letter, one lowercase letter, one number and one special character.
  password String @db.Text ///@zod.max(25).regex(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{12,}$/)
  userIcon String @db.VarChar(255)

  roleId Int @default(1)

  role             UserRole  @relation(fields: [roleId], references: [id])
  posts            Post[]
  comments         Comment[]
  tasksAssigned    Task[]
  projectsAssigned Project[]
  projectsManaged  Project[] @relation(name: "ProjectManagers")
}

model UserRole {
  id    Int    @id @default(autoincrement())
  label String @db.Text ///@zod.trim()

  users User[]
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String   @db.Text ///@zod.trim()
  createdDate DateTime @default(now())
  dueDate     DateTime
  description String   @db.Text

  statusId  Int
  projectId Int
  asignees  User[]

  status  TaskStatus @relation(fields: [statusId], references: [id])
  project Project    @relation(fields: [projectId], references: [id])
  SubTask SubTask[]
}

model SubTask {
  id          Int     @id @default(autoincrement())
  description String
  completed   Boolean
  task        Task    @relation(fields: [taskId], references: [id])
  taskId      Int
}

model TaskStatus {
  id    Int    @id @default(autoincrement())
  label String @db.Text ///@zod.trim()

  tasks     Task[]
  Project   Project @relation(fields: [projectId], references: [id])
  projectId Int
}

model Project {
  id          Int          @id @default(autoincrement())
  title       String
  createdDate DateTime     @default(now())
  dueDate     DateTime
  statuses    TaskStatus[]
  assignees   User[]
  managers    User[]       @relation(name: "ProjectManagers")
  tasks       Task[]
}
