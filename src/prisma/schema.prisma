generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// generator zod {
//   provider              = "zod-prisma"
//   output                = "./zod"
//   imports               = "./zod/helpers"
//   modelCase             = "PascalCase"
//   modelSuffix           = "Model"
//   relationModel         = true
//   useDecimalJs          = true
//   prismaJsonNullability = true
// }

model Example {
  id          Int      @id @default(autoincrement())
  dateCreated DateTime @default(now())
  text        String ///@zod.min(3)
}

model Document {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String ///@zod.min(3).trim()
  content   Bytes
  tags      Tag[]
  authors   User[]
}

model Tag {
  id    Int    @id @default(autoincrement())
  label String ///@zod.trim()
  color String ///@zod.trim()

  documents Document[]
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  title     String    @db.Text ///@zod.min(3).trim
  content   String    @db.Text
  solved    Boolean
  replies   Comment[]

  authorId Int

  author User @relation(fields: [authorId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())

  authorId Int
  postId   Int

  author User @relation(fields: [authorId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
}

model User {
  id       Int    @id @default(autoincrement())
  fullName String @db.Text ///@zod.min(3).trim
  email    String @unique @db.VarChar(30) ///@zod.email().trim
  password String @db.Text ///@zod.max(25).regex(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{12,}$/)
  userIcon String @db.VarChar(255)

  roleId Int @default(1)

  role             UserRole   @relation(fields: [roleId], references: [id])
  posts            Post[]
  comments         Comment[]
  tasksAssigned    Task[]
  projectsAssigned Project[]
  projectsManaged  Project[]  @relation(name: "ProjectManagers")
  Account          Account[]
  Session          Session[]
  Document         Document[]
}

model UserRole {
  id    Int    @id @default(autoincrement())
  label String @db.Text ///@zod.trim()

  users User[]
}

model Invitation {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(30) ///@zod.email().trim()
  createdAt DateTime @default(now())
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String   @db.Text ///@zod.trim()
  createdDate DateTime @default(now())
  dueDate     DateTime
  description String   @db.Text
  updatedAt   DateTime @updatedAt

  statusId  Int
  projectId Int
  assignees User[]
  manhours  Float  @default(1)

  status   TaskStatus @relation(fields: [statusId], references: [id], onDelete: Cascade)
  project  Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  subTasks SubTask[]
}

model SubTask {
  id          Int     @id @default(autoincrement())
  description String
  completed   Boolean @default(false)
  task        Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      Int
}

model TaskStatus {
  id    Int    @id @default(autoincrement())
  label String ///@zod.trim()

  tasks     Task[]
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
}

model Project {
  id          Int          @id @default(autoincrement())
  title       String
  createdDate DateTime     @default(now())
  dueDate     DateTime
  statuses    TaskStatus[]
  assignees   User[]
  managers    User[]       @relation(name: "ProjectManagers")
  tasks       Task[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
