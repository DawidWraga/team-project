{
	// Place your team-project workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Next.js Function Component ": {
		"prefix": "nfc",
		"body": [
			"export function ${TM_FILENAME_BASE/.*/${0:/capitalize}/} (props) {",
			"\tconst {} = props;",
			"\t",
			"\treturn (<$1>$2</$1>);",
			"}"
		]
	},
	"Next.js Function Component Parent ": {
		"prefix": "nfcp",
		"body": [
			"export default function ${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/${1:/capitalize}/}Page (props) {",
			"\tconst {} = props;",
			"\t",
			"\treturn (<$1>$2</$1>);",
			"}"
		]
	},
	"Next.js Functional Component Wrapper (TS)": {
		"prefix": "nfcw",
		"body": [
			"export default function ${TM_FILENAME_BASE/.*/${0:/capitalize}/} (props) {",
			"\tconst {children} = props;",
			"\t",
			"\treturn (",
			"\t\t<$1>",
			"\t\t\t$2",
			"\t\t\t{children}",
			"\t\t</$1>",
			"\t);",
			"}"
		]
	}
}
