// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// npx prisma generate 

generator zod {
  provider      = "zod-prisma"
  output        = "./zod"
  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports = "./zod/helpers" // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

model Post {
  id           Int       @id @default(autoincrement())
  date_created DateTime  @default(now())
  date_updated DateTime? @updatedAt
  title        String    @db.Text ///@zod.min(3).trim
  content      String    @db.Text
  solved       Boolean
  replies      Comment[]

  author_id Int

  author User @relation(fields: [author_id], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())

  author_id Int
  post_id   Int

  author User @relation(fields: [author_id], references: [id])
  post   Post @relation(fields: [post_id], references: [id])
}

model User {
  id        Int    @id @default(autoincrement())
  full_name String @db.Text ///@zod.min(3).trim
  email     String @db.Text ///@zod.email().trim
  //must be 12 char long, least one uppercase letter, one lowercase letter, one number and one special character.
  password  String @db.Text ///@zod.max(25).regex(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{12,}$/)
  user_icon String @db.Text

  role_id Int

  role              UserRole  @relation(fields: [role_id], references: [id])
  posts             Post[]
  comments          Comment[]
  tasks_assigned    Task[]
  projects_assigned Project[]
  projects_managed  Project[] @relation(name: "ProjectManagers")
}

model UserRole {
  id    Int    @id @default(autoincrement())
  label String @db.Text ///@zod.trim

  users User[]
}

model Task {
  id           Int      @id @default(autoincrement())
  title        String   @db.Text ///@zod.trim
  created_date DateTime @default(now())
  due_date     DateTime @default(dbgenerated("DATE_ADD(CURRENT_TIMESTAMP,INTERVAL 7 DAY)"))
  description  String   @default("") @db.Text
  list_name    String   @default("") @db.Text

  status_id  Int
  project_id Int
  asignees   User[]

  status  TaskStatus @relation(fields: [status_id], references: [id])
  project Project    @relation(fields: [project_id], references: [id])
}

model TaskStatus {
  id    Int    @id @default(autoincrement())
  label String @db.Text ///@zod.trim

  tasks Task[]
}

model Project {
  id           Int      @id @default(autoincrement())
  title        String
  created_date DateTime @default(now())
  due_date     DateTime @default(dbgenerated("DATE_ADD(CURRENT_TIMESTAMP,INTERVAL 7 DAY)"))

  assignees User[]
  managers  User[] @relation(name: "ProjectManagers")
  tasks     Task[]
}
